// 正規表達式
// 最初的使用方式，用於驗證表單
// 主要使用於處理字串，例如:查找、驗證、修改、替換 ...

/**
 * 參數1: 正規內容，又稱元字串，相當於正規表達式的關鍵字.
 *
 * 可使用選項.
 *
 * \b, 目標是字串結尾, 相當於字串中第一個字元左邊的空字元, 也可以是字串最後一個字元右邊的空字元.
 *
 * [\b], 待補充.
 *
 * \B, 目標是非字串起始, 相當於字元與字元中間的空字元.
 *
 * \d, 數字，相當於 [0-9].
 *
 * \D, 非數字，與上相反，相當於 [^0-9].
 *
 * \w, 數字和字母和底線, 等同於 [0-9a-zA-Z_].
 *
 * \W, 非數字和非字母和非底線，與上相反，等同於 [^0-9a-zA-Z_].
 *
 * \s, 空格.
 *
 * \S, 非空格.
 *
 * \u, 中文十六進位, 待補充.
 *
 * ^, 代表開頭字串才符合, 通常使用在第一個位置, 例如: /^cat/.
 *
 * $, 代表結尾字串才符合, 通常使用在最後一個位置, 例如: /cat$/.
 *
 * *, 代表 0 個或多個才符合, 相當於 {0, } 的縮寫.
 *
 * +, 代表 1 個或多個才符合, 相當於 {1, } 的縮寫, 可以排除空字元.
 *
 * ?, 代表零個或一個才符合, 相當於 {0, 1} 的縮寫.
 *
 * ., 代表不限制字元, 若搜索一次時的字串中有未知的字元, 則使用該符號替代.
 * 補充, 一個字元不同則使用 . 符號，兩個字元不同則使用 .. 符號.
 *
 * |, 代表選擇符號, 例如:/cat|cdt/ 可以搜索到 cat cdt.
 * 補充, /a|b|c/ 相當於 [abc].
 * 補充, 與 [] 不同的在於, [] 符號只能針對搜索一次時的字串中一個字元，| 符號可以針對目標字串中多個字元, 注意搜索一次時的字串與目標字串是不同的.
 *
 * {n}, 代表重複 n 次, 例如: [ab]{2} 相當於 [ab][ab].
 *
 * {n,m}, 代表最少重複 n 次，最多重複 m 次，優先尋找 m 次.
 * 補充, let str = "aaaaaa"; str.match(/a{2, 4}/g); // [aaaa, aa]
 * 補充, {0} 代表空字元才符合.
 * 補充, {0, } 代表空字元或所有字元都符合.
 * 補充, {0, 4} 代表 a aa aaa aaaa 都符合，因為 {0} 是空字元.
 * 補充, {1, } 代表 a aa aaa aaaa aaaaa 都符合, 因為沒有設定重複上限, 所以重複與不重複都符合.
 *
 * [], 字元的集合, 代表搜索一次時的字串中一個字元的範圍, 可以是大小寫英文或數字或符號.
 * 補充, [abc] 代表一個字元的範圍是 a 字元或是 b 字元或是 c 字元.
 * 補充, [a-z] 代表小寫英文字母.
 * 補充, [A-Z] 代表大寫英文字母.
 * 補充, [a-zA-Z] 代表大小寫英文字母.
 * 補充, [0-9] 代表數字才符合.
 * 補充, [.] 代表小數點, 而非不限制字元.
 * 補充, [^] 代表以外, 在中誇號內使用該符號必須放在第一位, 例如: [^0-9] 代表數字以外.
 * 補充, [{}] 代表字元符號 {}.
 * 補充, [*] 代表字元符號 *.
 * 補充, [+] 代表字元符號 +.
 * 補充, [?] 代表字元符號 ?.
 *
 * (), 分組, 通常用於將重複的正規內容縮寫, 可以配合 String.prototype.replace 使用.
 * 例如: /^\d{4}-\d{2}-\d{2}$/ 修改為 /^\d{4}(-\d{2}){2}$/.
 * 補充, 也許可以作為並且用於條件判斷, 相當於 & 符號, 詳細請看 password.html 檔案.
 *
 * ?= 緊跟其後是, 算是一種條件設定, 通常會配合分組.
 * 例如:
 * let str = "abac";
 * console.log(str.match(/a(?=b)/)); // [ 'a', index: 0, input: 'abac', groups: undefined ]
 *
 * ?! 緊跟其後不是, 與 ?= 相反.
 */

/**
 * 補充說明.
 *
 * 若目標字串中的字元, 在正規表達式中是關鍵字, 則使用符號轉譯，將該字元轉為正常字元.
 * 例如: 目標字串為 "1+1", 但 + 符號為關鍵字, 故使用 \+ 轉譯, 寫法: /1\+1/.
 *
 * 若需要指定搜索一次時的字元長度, 可以這樣寫: {3}, 代表搜索一次找三個字元.
 *
 * {1, 4}?, 代表優先尋找重複 1 次的, {1, 4} 可以換成任何符號, 待補充.
 */

/**
 * 參數2:正規額外條件，又稱修飾符.
 *
 * i, 不區分大小寫.
 *
 * g, 全局搜索, 返回所有符合的字串, 意思相當於搜尋多次.
 * 若無設至該條件則只返回搜索到的第一個.
 *
 * m, 多行搜索, 待補充.
 */

// -----------------------------------------------------------------------------

// 第一種寫法
// let reg = new RegExp("cd", i);

// 第二種寫法
// let reg = /cd/i;

// -----------------------------------------------------------------------------

// 範例

// let test = "tesT.i.ng";
// console.log(test.match(/[a-z]+\./gi)); // [ 'tesT.', 'i.' ]

// let test = "[a][b]";
// console.log(test.match(/[\[][a-z][\]]/g)); // [ '[a]', '[b]' ]
